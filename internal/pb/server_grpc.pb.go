// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/pb/server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthGrpcService_Register_FullMethodName     = "/chat.AuthGrpcService/Register"
	AuthGrpcService_Login_FullMethodName        = "/chat.AuthGrpcService/Login"
	AuthGrpcService_RefreshToken_FullMethodName = "/chat.AuthGrpcService/RefreshToken"
	AuthGrpcService_Logout_FullMethodName       = "/chat.AuthGrpcService/Logout"
	AuthGrpcService_CheckAuth_FullMethodName    = "/chat.AuthGrpcService/CheckAuth"
)

// AuthGrpcServiceClient is the client API for AuthGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthGrpcServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	CheckAuth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthGrpcServiceClient(cc grpc.ClientConnInterface) AuthGrpcServiceClient {
	return &authGrpcServiceClient{cc}
}

func (c *authGrpcServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AuthGrpcService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrpcServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthGrpcService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrpcServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, AuthGrpcService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrpcServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, AuthGrpcService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrpcServiceClient) CheckAuth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthGrpcService_CheckAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthGrpcServiceServer is the server API for AuthGrpcService service.
// All implementations must embed UnimplementedAuthGrpcServiceServer
// for forward compatibility.
type AuthGrpcServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	CheckAuth(context.Context, *emptypb.Empty) (*AuthResponse, error)
	mustEmbedUnimplementedAuthGrpcServiceServer()
}

// UnimplementedAuthGrpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthGrpcServiceServer struct{}

func (UnimplementedAuthGrpcServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthGrpcServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthGrpcServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthGrpcServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthGrpcServiceServer) CheckAuth(context.Context, *emptypb.Empty) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedAuthGrpcServiceServer) mustEmbedUnimplementedAuthGrpcServiceServer() {}
func (UnimplementedAuthGrpcServiceServer) testEmbeddedByValue()                         {}

// UnsafeAuthGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthGrpcServiceServer will
// result in compilation errors.
type UnsafeAuthGrpcServiceServer interface {
	mustEmbedUnimplementedAuthGrpcServiceServer()
}

func RegisterAuthGrpcServiceServer(s grpc.ServiceRegistrar, srv AuthGrpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthGrpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthGrpcService_ServiceDesc, srv)
}

func _AuthGrpcService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrpcServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGrpcService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrpcServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrpcService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrpcServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGrpcService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrpcServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrpcService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrpcServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGrpcService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrpcServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrpcService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrpcServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGrpcService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrpcServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrpcService_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrpcServiceServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthGrpcService_CheckAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrpcServiceServer).CheckAuth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthGrpcService_ServiceDesc is the grpc.ServiceDesc for AuthGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.AuthGrpcService",
	HandlerType: (*AuthGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthGrpcService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthGrpcService_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthGrpcService_RefreshToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthGrpcService_Logout_Handler,
		},
		{
			MethodName: "CheckAuth",
			Handler:    _AuthGrpcService_CheckAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pb/server.proto",
}

const (
	RoomGrpcService_CreateRoom_FullMethodName     = "/chat.RoomGrpcService/CreateRoom"
	RoomGrpcService_ListRooms_FullMethodName      = "/chat.RoomGrpcService/ListRooms"
	RoomGrpcService_JoinRoom_FullMethodName       = "/chat.RoomGrpcService/JoinRoom"
	RoomGrpcService_LeaveRoom_FullMethodName      = "/chat.RoomGrpcService/LeaveRoom"
	RoomGrpcService_GetRoomStats_FullMethodName   = "/chat.RoomGrpcService/GetRoomStats"
	RoomGrpcService_GetRoom_FullMethodName        = "/chat.RoomGrpcService/GetRoom"
	RoomGrpcService_DeleteRoom_FullMethodName     = "/chat.RoomGrpcService/DeleteRoom"
	RoomGrpcService_GetRoomMembers_FullMethodName = "/chat.RoomGrpcService/GetRoomMembers"
)

// RoomGrpcServiceClient is the client API for RoomGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomGrpcServiceClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error)
	ListRooms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RoomEvent], error)
	LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRoomStats(ctx context.Context, in *RoomID, opts ...grpc.CallOption) (*RoomStatsResponse, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*Room, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRoomMembers(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*RoomMembers, error)
}

type roomGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomGrpcServiceClient(cc grpc.ClientConnInterface) RoomGrpcServiceClient {
	return &roomGrpcServiceClient{cc}
}

func (c *roomGrpcServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Room)
	err := c.cc.Invoke(ctx, RoomGrpcService_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomGrpcServiceClient) ListRooms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, RoomGrpcService_ListRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomGrpcServiceClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RoomEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RoomGrpcService_ServiceDesc.Streams[0], RoomGrpcService_JoinRoom_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JoinRoomRequest, RoomEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoomGrpcService_JoinRoomClient = grpc.ServerStreamingClient[RoomEvent]

func (c *roomGrpcServiceClient) LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoomGrpcService_LeaveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomGrpcServiceClient) GetRoomStats(ctx context.Context, in *RoomID, opts ...grpc.CallOption) (*RoomStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomStatsResponse)
	err := c.cc.Invoke(ctx, RoomGrpcService_GetRoomStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomGrpcServiceClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Room)
	err := c.cc.Invoke(ctx, RoomGrpcService_GetRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomGrpcServiceClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoomGrpcService_DeleteRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomGrpcServiceClient) GetRoomMembers(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*RoomMembers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomMembers)
	err := c.cc.Invoke(ctx, RoomGrpcService_GetRoomMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomGrpcServiceServer is the server API for RoomGrpcService service.
// All implementations must embed UnimplementedRoomGrpcServiceServer
// for forward compatibility.
type RoomGrpcServiceServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*Room, error)
	ListRooms(context.Context, *emptypb.Empty) (*ListRoomsResponse, error)
	JoinRoom(*JoinRoomRequest, grpc.ServerStreamingServer[RoomEvent]) error
	LeaveRoom(context.Context, *LeaveRoomRequest) (*emptypb.Empty, error)
	GetRoomStats(context.Context, *RoomID) (*RoomStatsResponse, error)
	GetRoom(context.Context, *GetRoomRequest) (*Room, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*emptypb.Empty, error)
	GetRoomMembers(context.Context, *GetRoomRequest) (*RoomMembers, error)
	mustEmbedUnimplementedRoomGrpcServiceServer()
}

// UnimplementedRoomGrpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoomGrpcServiceServer struct{}

func (UnimplementedRoomGrpcServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomGrpcServiceServer) ListRooms(context.Context, *emptypb.Empty) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}
func (UnimplementedRoomGrpcServiceServer) JoinRoom(*JoinRoomRequest, grpc.ServerStreamingServer[RoomEvent]) error {
	return status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedRoomGrpcServiceServer) LeaveRoom(context.Context, *LeaveRoomRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedRoomGrpcServiceServer) GetRoomStats(context.Context, *RoomID) (*RoomStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomStats not implemented")
}
func (UnimplementedRoomGrpcServiceServer) GetRoom(context.Context, *GetRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedRoomGrpcServiceServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedRoomGrpcServiceServer) GetRoomMembers(context.Context, *GetRoomRequest) (*RoomMembers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomMembers not implemented")
}
func (UnimplementedRoomGrpcServiceServer) mustEmbedUnimplementedRoomGrpcServiceServer() {}
func (UnimplementedRoomGrpcServiceServer) testEmbeddedByValue()                         {}

// UnsafeRoomGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomGrpcServiceServer will
// result in compilation errors.
type UnsafeRoomGrpcServiceServer interface {
	mustEmbedUnimplementedRoomGrpcServiceServer()
}

func RegisterRoomGrpcServiceServer(s grpc.ServiceRegistrar, srv RoomGrpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoomGrpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoomGrpcService_ServiceDesc, srv)
}

func _RoomGrpcService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomGrpcServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomGrpcService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomGrpcServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomGrpcService_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomGrpcServiceServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomGrpcService_ListRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomGrpcServiceServer).ListRooms(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomGrpcService_JoinRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinRoomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomGrpcServiceServer).JoinRoom(m, &grpc.GenericServerStream[JoinRoomRequest, RoomEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoomGrpcService_JoinRoomServer = grpc.ServerStreamingServer[RoomEvent]

func _RoomGrpcService_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomGrpcServiceServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomGrpcService_LeaveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomGrpcServiceServer).LeaveRoom(ctx, req.(*LeaveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomGrpcService_GetRoomStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomGrpcServiceServer).GetRoomStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomGrpcService_GetRoomStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomGrpcServiceServer).GetRoomStats(ctx, req.(*RoomID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomGrpcService_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomGrpcServiceServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomGrpcService_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomGrpcServiceServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomGrpcService_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomGrpcServiceServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomGrpcService_DeleteRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomGrpcServiceServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomGrpcService_GetRoomMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomGrpcServiceServer).GetRoomMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomGrpcService_GetRoomMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomGrpcServiceServer).GetRoomMembers(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomGrpcService_ServiceDesc is the grpc.ServiceDesc for RoomGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.RoomGrpcService",
	HandlerType: (*RoomGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _RoomGrpcService_CreateRoom_Handler,
		},
		{
			MethodName: "ListRooms",
			Handler:    _RoomGrpcService_ListRooms_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _RoomGrpcService_LeaveRoom_Handler,
		},
		{
			MethodName: "GetRoomStats",
			Handler:    _RoomGrpcService_GetRoomStats_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _RoomGrpcService_GetRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _RoomGrpcService_DeleteRoom_Handler,
		},
		{
			MethodName: "GetRoomMembers",
			Handler:    _RoomGrpcService_GetRoomMembers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinRoom",
			Handler:       _RoomGrpcService_JoinRoom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/pb/server.proto",
}

const (
	MessageGrpcService_SendMessage_FullMethodName    = "/chat.MessageGrpcService/SendMessage"
	MessageGrpcService_StreamMessages_FullMethodName = "/chat.MessageGrpcService/StreamMessages"
)

// MessageGrpcServiceClient is the client API for MessageGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageGrpcServiceClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*MessageAck, error)
	StreamMessages(ctx context.Context, in *RoomID, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error)
}

type messageGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageGrpcServiceClient(cc grpc.ClientConnInterface) MessageGrpcServiceClient {
	return &messageGrpcServiceClient{cc}
}

func (c *messageGrpcServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*MessageAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageAck)
	err := c.cc.Invoke(ctx, MessageGrpcService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageGrpcServiceClient) StreamMessages(ctx context.Context, in *RoomID, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageGrpcService_ServiceDesc.Streams[0], MessageGrpcService_StreamMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RoomID, ChatMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageGrpcService_StreamMessagesClient = grpc.ServerStreamingClient[ChatMessage]

// MessageGrpcServiceServer is the server API for MessageGrpcService service.
// All implementations must embed UnimplementedMessageGrpcServiceServer
// for forward compatibility.
type MessageGrpcServiceServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*MessageAck, error)
	StreamMessages(*RoomID, grpc.ServerStreamingServer[ChatMessage]) error
	mustEmbedUnimplementedMessageGrpcServiceServer()
}

// UnimplementedMessageGrpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageGrpcServiceServer struct{}

func (UnimplementedMessageGrpcServiceServer) SendMessage(context.Context, *SendMessageRequest) (*MessageAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageGrpcServiceServer) StreamMessages(*RoomID, grpc.ServerStreamingServer[ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedMessageGrpcServiceServer) mustEmbedUnimplementedMessageGrpcServiceServer() {}
func (UnimplementedMessageGrpcServiceServer) testEmbeddedByValue()                            {}

// UnsafeMessageGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageGrpcServiceServer will
// result in compilation errors.
type UnsafeMessageGrpcServiceServer interface {
	mustEmbedUnimplementedMessageGrpcServiceServer()
}

func RegisterMessageGrpcServiceServer(s grpc.ServiceRegistrar, srv MessageGrpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedMessageGrpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageGrpcService_ServiceDesc, srv)
}

func _MessageGrpcService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageGrpcServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageGrpcService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageGrpcServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageGrpcService_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoomID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageGrpcServiceServer).StreamMessages(m, &grpc.GenericServerStream[RoomID, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageGrpcService_StreamMessagesServer = grpc.ServerStreamingServer[ChatMessage]

// MessageGrpcService_ServiceDesc is the grpc.ServiceDesc for MessageGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.MessageGrpcService",
	HandlerType: (*MessageGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessageGrpcService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _MessageGrpcService_StreamMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/pb/server.proto",
}
